apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
  name: inverse-proxy-config
  namespace: kubeflow

---
apiVersion: v1
data:
  defaultPipelineRoot: ""
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
  name: kfp-launcher
  namespace: kubeflow

---
apiVersion: v1
data:
  METADATA_GRPC_SERVICE_HOST: metadata-grpc-service
  METADATA_GRPC_SERVICE_PORT: "8080"
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
    component: metadata-grpc-server
  name: metadata-grpc-configmap
  namespace: kubeflow

---
apiVersion: v1
data:
  viewer-pod-template.json: |-
    {
        "spec": {
            "serviceAccountName": "kubeflow-pipelines-viewer"
        }
    }
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
  name: ml-pipeline-ui-configmap
  namespace: kubeflow

---
apiVersion: v1
data:
  ConMaxLifeTimeSec: "120"
  appName: pipeline
  appVersion: 1.7.0
  autoUpdatePipelineDefaultVersion: "true"
  bucketName: mlpipeline
  cacheDb: cachedb
  cacheImage: registry.baidubce.com/paddleflow-public/busybox
  cacheNodeRestrictions: "false"
  cronScheduleTimezone: UTC
  dbHost: mysql
  dbPort: "3306"
  defaultPipelineRoot: ""
  mlmdDb: metadb
  pipelineDb: mlpipeline
  warning: |
    1. Do not use kubectl to edit this configmap, because some values are used
    during kustomize build. Instead, change the configmap and apply the entire
    kustomize manifests again.
    2. After updating the configmap, some deployments may need to be restarted
    until the changes take effect. A quick way to restart all deployments in a
    namespace: `kubectl rollout restart deployment -n <your-namespace>`.
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
  name: pipeline-install-config
  namespace: kubeflow

---
apiVersion: v1
data:
  artifactRepository: |
    archiveLogs: true
    s3:
      endpoint: "minio-service.kubeflow:9000"
      bucket: "mlpipeline"
      # keyFormat is a format pattern to define how artifacts will be organized in a bucket.
      # It can reference workflow metadata variables such as workflow.namespace, workflow.name,
      # pod.name. Can also use strftime formating of workflow.creationTimestamp so that workflow
      # artifacts can be organized by date. If omitted, will use `{{workflow.name}}/{{pod.name}}`,
      # which has potential for have collisions, because names do not guarantee they are unique
      # over the lifetime of the cluster.
      # Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/names/.
      #
      # The following format looks like:
      # artifacts/my-workflow-abc123/2018/08/23/my-workflow-abc123-1234567890
      # Adding date into the path greatly reduces the chance of {{pod.name}} collision.
      keyFormat: "artifacts/{{workflow.name}}/{{workflow.creationTimestamp.Y}}/{{workflow.creationTimestamp.m}}/{{workflow.creationTimestamp.d}}/{{pod.name}}"
      # insecure will disable TLS. Primarily used for minio installs not configured with TLS
      insecure: true
      accessKeySecret:
        name: mlpipeline-minio-artifact
        key: accesskey
      secretKeySecret:
        name: mlpipeline-minio-artifact
        key: secretkey
  containerRuntimeExecutor: docker
  executor: |
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        cpu: 0.01
        memory: 32Mi
      limits:
        cpu: 0.5
        memory: 512Mi
kind: ConfigMap
metadata:
  labels:
    application-crd-id: kubeflow-pipelines
  name: workflow-controller-configmap
  namespace: kubeflow