apiVersion: apps/v1
kind: Deployment
metadata:
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    application-crd-id: kubeflow-pipelines
  name: {{ printf "%s-workflow-controller" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app: workflow-controller
      application-crd-id: kubeflow-pipelines
  template:
    metadata:
      labels: {{- include "common.labels.matchLabels" . | nindent 8 }}
        app: workflow-controller
        application-crd-id: kubeflow-pipelines
    spec:
      containers:
        - args:
            - --configmap
            - workflow-controller-configmap
            - --executor-image
            - {{ include "common.images.image" (dict "imageRoot" .Values.argoexecImage "global" .Values.global) }}
            - --namespaced
          command:
            - workflow-controller
          env:
            - name: LEADER_ELECTION_IDENTITY
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
          image: {{ include "common.images.image" (dict "imageRoot" .Values.workflow.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.workflow.image.pullPolicy | quote }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 6060
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 30
          name: workflow-controller
          ports:
            - containerPort: 9090
              name: metrics
            - containerPort: 6060
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        runAsNonRoot: true
      serviceAccountName: argo
