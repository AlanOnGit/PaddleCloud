apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.29.0"
    tekton.dev/categories: Git
    tekton.dev/tags: git
    tekton.dev/displayName: "git clone"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le,linux/arm64"
spec:
  description: >-
    These Tasks are Git tasks to work with repositories used by other tasks
    in your Pipeline.

    The git-clone Task will clone a repo from the provided url into the
    output Workspace. By default the repo will be cloned into the root of
    your Workspace. You can clone into a subdirectory by setting this Task's
    subdirectory param. This Task also supports sparse checkouts. To perform
    a sparse checkout, pass a list of comma separated directory patterns to
    this Task's sparseCheckoutDirectories param.
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this Workspace.
    - name: ssh-directory
      optional: true
      description: |
        A .ssh directory with private key, known_hosts, config, etc. Copied to
        the user's home before git commands are executed. Used to authenticate
        with the git remote when performing the clone. Binding a Secret to this
        Workspace is strongly recommended over other volume types.
    - name: basic-auth
      optional: true
      description: |
        A Workspace containing a .gitconfig and .git-credentials file. These
        will be copied to the user's home before any git commands are run. Any
        other files in this Workspace are ignored. It is strongly recommended
        to use ssh-directory over basic-auth whenever possible and to bind a
        Secret to this Workspace over other volume types.
    - name: ssl-ca-directory
      optional: true
      description: |
        A workspace containing CA certificates, this will be used by Git to
        verify the peer with when fetching or pushing over HTTPS.
  params:
    - name: url
      description: Repository URL to clone from.
      type: string
    - name: revision
      description: Revision to checkout. (branch, tag, sha, ref, etc...)
      type: string
      default: ""
    - name: refspec
      description: Refspec to fetch before checking out revision.
      default: ""
    - name: submodules
      description: Initialize and fetch git submodules.
      type: string
      default: "true"
    - name: depth
      description: Perform a shallow clone, fetching only the most recent N commits.
      type: string
      default: "1"
    - name: sslVerify
      description: Set the `http.sslVerify` global git config. Setting this to `false` is not advised unless you are sure that you trust your git remote.
      type: string
      default: "true"
    - name: subdirectory
      description: Subdirectory inside the `output` Workspace to clone the repo into.
      type: string
      default: ""
    - name: sparseCheckoutDirectories
      description: Define the directory patterns to match or exclude when performing a sparse checkout.
      type: string
      default: ""
    - name: deleteExisting
      description: Clean out the contents of the destination directory if it already exists before cloning.
      type: string
      default: "true"
    - name: httpProxy
      description: HTTP proxy server for non-SSL requests.
      type: string
      default: ""
    - name: httpsProxy
      description: HTTPS proxy server for SSL requests.
      type: string
      default: ""
    - name: noProxy
      description: Opt out of proxying HTTP/HTTPS requests.
      type: string
      default: ""
    - name: verbose
      description: Log the commands that are executed during `git-clone`'s operation.
      type: string
      default: "true"
    - name: gitInitImage
      description: The image providing the git-init binary that this Task runs.
      type: string
      default: "gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0"
    - name: userHome
      description: |
        Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
        the gitInitImage param with an image containing custom user configuration.
      type: string
      default: "/tekton/home"
  results:
    - name: commit-id
      description: The precise commit SHA that was fetched by this Task.
    - name: commit-time
      description: The last commit time.
    - name: url
      description: The precise URL that was fetched by this Task.
  steps:
    - name: clone
      image: "$(params.gitInitImage)"
      env:
      - name: HOME
        value: "$(params.userHome)"
      - name: PARAM_URL
        value: $(params.url)
      - name: PARAM_REVISION
        value: $(params.revision)
      - name: PARAM_REFSPEC
        value: $(params.refspec)
      - name: PARAM_SUBMODULES
        value: $(params.submodules)
      - name: PARAM_DEPTH
        value: $(params.depth)
      - name: PARAM_SSL_VERIFY
        value: $(params.sslVerify)
      - name: PARAM_SUBDIRECTORY
        value: $(params.subdirectory)
      - name: PARAM_DELETE_EXISTING
        value: $(params.deleteExisting)
      - name: PARAM_HTTP_PROXY
        value: $(params.httpProxy)
      - name: PARAM_HTTPS_PROXY
        value: $(params.httpsProxy)
      - name: PARAM_NO_PROXY
        value: $(params.noProxy)
      - name: PARAM_VERBOSE
        value: $(params.verbose)
      - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
        value: $(params.sparseCheckoutDirectories)
      - name: PARAM_USER_HOME
        value: $(params.userHome)
      - name: WORKSPACE_OUTPUT_PATH
        value: $(workspaces.output.path)
      - name: WORKSPACE_SSH_DIRECTORY_BOUND
        value: $(workspaces.ssh-directory.bound)
      - name: WORKSPACE_SSH_DIRECTORY_PATH
        value: $(workspaces.ssh-directory.path)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
        value: $(workspaces.basic-auth.bound)
      - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
        value: $(workspaces.basic-auth.path)
      - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
        value: $(workspaces.ssl-ca-directory.bound)
      - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
        value: $(workspaces.ssl-ca-directory.path)
      script: |
        #!/usr/bin/env sh
        set -eu

        if [ "${PARAM_VERBOSE}" = "true" ] ; then
          set -x
        fi


        if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
          cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
          chmod 400 "${PARAM_USER_HOME}/.git-credentials"
          chmod 400 "${PARAM_USER_HOME}/.gitconfig"
        fi

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
          cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
          chmod 700 "${PARAM_USER_HOME}"/.ssh
          chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
        fi

        if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
           export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
        fi
        CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
          # or the root of a mounted volume.
          if [ -d "${CHECKOUT_DIR}" ] ; then
            # Delete non-hidden files and directories
            rm -rf "${CHECKOUT_DIR:?}"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "${CHECKOUT_DIR}"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "${CHECKOUT_DIR}"/..?*
          fi
        }

        if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
          cleandir
        fi

        test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
        test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
        test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

        /ko-app/git-init \
          -url="${PARAM_URL}" \
          -revision="${PARAM_REVISION}" \
          -refspec="${PARAM_REFSPEC}" \
          -path="${CHECKOUT_DIR}" \
          -sslVerify="${PARAM_SSL_VERIFY}" \
          -submodules="${PARAM_SUBMODULES}" \
          -depth="${PARAM_DEPTH}" \
          -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
        cd "${CHECKOUT_DIR}"
        RESULT_SHA="$(git rev-parse HEAD)"
        RESULT_TIME="$(git show --pretty=format:"%ci %cr" | head -1)"
        EXIT_CODE="$?"
        if [ "${EXIT_CODE}" != 0 ] ; then
          exit "${EXIT_CODE}"
        fi
        printf "%s" "${RESULT_SHA:0:6}" > "$(results.commit-id.path)"
        printf "%s" "${RESULT_TIME:0:10}" > "$(results.commit-time.path)"
        printf "%s" "${PARAM_URL}" > "$(results.url.path)"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig        # taskrun can use this, but pipelinerun must use serviceAccount to get this cred
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: preview-info
      image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
      script: |
        echo "context: $(workspaces.source.path)/$(params.CONTEXT)"
        cd $(workspaces.source.path)/$(params.CONTEXT)
        echo "context ls: `ls`"
        echo "dockerfile: $(workspaces.source.path)/$(params.CONTEXT)/$(params.DOCKERFILE)"
        echo "destination: $(params.IMAGE)"
    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      args:
        - $(params.EXTRA_ARGS)
        - --dockerfile=$(params.DOCKERFILE)
        - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
        - --destination=$(params.IMAGE)
        - --digest-file=$(results.IMAGE_DIGEST.path)
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
    - name: write-url
      image: docker.io/library/bash:5.1.4@sha256:b208215a4655538be652b2769d82e576bc4d0a2bb132144c060efc5be8c3f5d6
      script: |
        set -e
        image="$(params.IMAGE)"
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: prepare-build-env
spec:
  description: Parse parameters from original infos and prepare env for kaniko task.
  workspaces:
  - name: source
    description: Containing paddle toolkit repo and docker repo.
  params:
  - name: toolkit-name
    description: The paddle toolkit name.
  - name: revision
    description: The branch of paddle toolkit repo.
    type: string
  - name: paddle-base-tag
    description: The tag of paddle base image.
    type: string
    default: 2.2.2
  - name: toolkit-dir
    description: The dir name of paddle toolkit repo in the workspace.
  - name: dockerfile-path
    description: The relative path to Dockerfile within repo.
  results:
  - name: dockerfile-name
    description: The dockerfile's file name.
  - name: image-tag-branch
    description: image release version
  - name: image-tag-env
    description: The base env of paddlepaddle image.
  - name: paddle-version
    description: x.x.x
  - name: hardware
    description: gpu or cpu docker image
  steps:
  - name: preparing
    image: zshusers/zsh:5.8
    env:
    - name: REVISION
      value: $(params.revision)
    - name: PADDLE_BASE_TAG
      value: $(params.paddle-base-tag)
    - name: TOOLKIT_DIR
      value: $(params.toolkit-dir)
    - name: DOCKERFILE_PATH
      value: $(params.dockerfile-path)
    script: |
      #!/usr/bin/env zsh
      set -x
      cd $(workspaces.source.path) && mkdir docker
      mv repo-docker/${DOCKERFILE_PATH} docker/ && DOCKERFILE_NAME=`ls docker`
      mv ${TOOLKIT_DIR} docker/ && cd docker
      echo "current path: `pwd`"
      echo "file list: `ls`"

      PADDLE_VERSION=${PADDLE_BASE_TAG:0:5}

      if [[ ${REVISION:0:7} == "release" ]]
      then
          REVISION=${REVISION:0-3:3}
      fi

      if [[ ${PADDLE_BASE_TAG} =~ "-" ]]
      then
          IMAGE_TAG_ENV=${PADDLE_BASE_TAG#*"-"}
      else
          IMAGE_TAG_ENV="cpu"
      fi

      if [[ ${PADDLE_BASE_TAG} =~ "gpu" ]]
      then
          HARDWARE="gpu"
      else
          HARDWARE="cpu"
      fi

      printf "%s" "${DOCKERFILE_NAME}" > "$(results.dockerfile-name.path)"
      printf "%s" "${PADDLE_VERSION}" > "$(results.paddle-version.path)"
      printf "%s" "${IMAGE_TAG_ENV}" > "$(results.image-tag-env.path)"
      printf "%s" "${REVISION}" > "$(results.image-tag-branch.path)"
      printf "%s" "${HARDWARE}" > "$(results.hardware.path)"
  - name: mod-dockerfile
    image: zshusers/zsh:5.8
    env:
    - name: TOOLKIT_NAME
      value: $(params.toolkit-name)
    script: |
      #!/usr/bin/env zsh
      set -x
      cd $(workspaces.source.path)/docker

      NO_REQUIREMENT=(PaddleRec PaddleSpeech)
      NO_INSTALL=(PaddleClas PaddleRec)

      # macOS shoule be sed "" -i ...
      if [[ ${NO_REQUIREMENT[*]} =~ ${TOOLKIT_NAME} ]]
      then
        sed -i "/requirements.txt/d" Dockerfile
      fi

      if [[ ${NO_INSTALL[*]} =~ ${TOOLKIT_NAME} ]]
      then
        sed -i "/setup.py/d" Dockerfile
      fi

---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-single-image
spec:
  params:
  - name: toolkit-repo-name
    type: string
    description: The repo name. (PaddleOCR/PaddleDetection/PaddleNLP/PaddleSeg/PaddleClas/PaddleSpeech/PaddleRec)
  - name: toolkit-revision
    type: string
    description: The branch of paddle toolkit to clone.
  - name: toolkit-base-image-tag
    type: string
    description: Tag of the paddle base image. Found in https://hub.docker.com/r/paddlepaddle/paddle/tags.
    default: 2.2.2
  - name: docker-repo-url
    type: string
    description: The git repository containing Dockerfile.
  - name: docker-revision
    type: string
    description: The branch of the docker repo to clone.
  - name: image-registry
    type: string
    description: The image registry to push. In the format of $docker_hub_username/$repo.
  - name: dockerfile-path
    type: string
    description: Relative path to the Dockerfile within the docker-repo.
  - name: kaniko-image
    type: string
    description: kaniko image to use. Latest image has some auth problem， recommend default.
    default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
  workspaces:
  - name: shared-data
    description: "save git repos"
  tasks:
  - name: fetch-paddle-toolkit-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: https://github.com/PaddlePaddle/$(params.toolkit-repo-name)
    - name: revision
      value: $(params.toolkit-revision)
    - name: subdirectory
      value: $(params.toolkit-repo-name)
  - name: fetch-docker-repo
    taskRef:
      name: git-clone
    workspaces:
    - name: output
      workspace: shared-data
    params:
    - name: url
      value: $(params.docker-repo-url)
    - name: revision
      value: $(params.docker-revision)
    - name: subdirectory
      value: repo-docker
  - name: parse-and-prepare
    taskRef:
      name: prepare-build-env
    runAfter:
      - fetch-docker-repo
      - fetch-paddle-toolkit-repo
    workspaces:
    - name: source
      workspace: shared-data
    params:
    - name: toolkit-name
      value: $(params.toolkit-repo-name)
    - name: revision
      value: $(params.toolkit-revision)
    - name: paddle-base-tag
      value: $(params.toolkit-base-image-tag)
    - name: toolkit-dir
      value: $(params.toolkit-repo-name)
    - name: dockerfile-path
      value: $(params.dockerfile-path)
  - name: build-image
    runAfter:
      - parse-and-prepare
    taskRef:
      name: kaniko
    params:
      - name: IMAGE
        value: "$(params.image-registry):$(tasks.parse-and-prepare.results.image-tag-branch)-$(tasks.parse-and-prepare.results.image-tag-env)-$(tasks.fetch-paddle-toolkit-repo.results.commit-id)"
      - name: CONTEXT
        value: docker
      - name: DOCKERFILE
        value: $(tasks.parse-and-prepare.results.dockerfile-name)
      - name: BUILDER_IMAGE
        value: $(params.kaniko-image)
      - name: EXTRA_ARGS
        value:
          - --build-arg=IMAGE_TAG=$(params.toolkit-base-image-tag)
          - --build-arg=PADDLE_TOOLKIT=$(params.toolkit-repo-name)
    workspaces:
      - name: source
        workspace: shared-data



